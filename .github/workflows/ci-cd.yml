name: CI/CD Cloud Run

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO: ebiznes10
  BACKEND_SERVICE: eb10-backend
  FRONTEND_SERVICE: eb10-frontend

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Backend install
        working-directory: backend
        run: npm ci
      - name: Backend tests
        working-directory: backend
        run: npm test

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Frontend install
        working-directory: frontend
        run: npm ci
      - name: Frontend build (local check)
        working-directory: frontend
        run: npm run build

  docker-deploy:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Backend image
      - name: Build backend image
        run: |
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/backend:${{ github.sha }} backend
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/backend:${{ github.sha }}

      # Backend -> Cloud Run
      - name: Deploy backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.BACKEND_SERVICE }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/backend:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: --port=8080 --allow-unauthenticated

      # BACKEND
      - name: Set BACKEND_URL env
        run: echo "BACKEND_URL=${{ steps.deploy-backend.outputs.url }}" >> $GITHUB_ENV

      # Frontend image
      - name: Build frontend image
        run: |
          docker build \
            --build-arg VITE_API_URL="${{ env.BACKEND_URL }}" \
            -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/frontend:${{ github.sha }} frontend
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/frontend:${{ github.sha }}

      # Frontend -> Cloud Run
      - name: Deploy frontend to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.FRONTEND_SERVICE }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/frontend:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: --port=8080 --allow-unauthenticated

      - name: Set FRONTEND_URL env
        run: echo "FRONTEND_URL=${{ steps.deploy-frontend.outputs.url }}" >> $GITHUB_ENV

      # Testy E2E
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend deps for tests
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Run Playwright regression
        working-directory: frontend
        env:
          APP_URL: ${{ env.FRONTEND_URL }}
        run: npm run test:regression

      - name: Send email on success
        if: ${{ success() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASS }}
          subject: "CI/CD: Deploy udany"
          to: pawelwoe@gmail.com
          from: "CI/CD Bot <${{ secrets.MAIL_USER }}>"
          content_type: text/html
          body: "Elegancko"

      - name: Send email on failure
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASS }}
          subject: "CI/CD: Deploy nieudany"
          to: pawelwoe@gmail.com
          from: "CI/CD Bot <${{ secrets.MAIL_USER }}>"
          content_type: text/plain
          body: "Coś poszło nie tak"

